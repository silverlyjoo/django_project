{"changed":false,"filter":false,"title":"models.py","tooltip":"/Movies/movies/models.py","value":"from django.db import models\nfrom django.core.validators import MaxValueValidator, MinValueValidator\nfrom django.conf import settings\n\n# Create your models here.\nclass Genre(models.Model):\n    name = models.CharField(max_length=50)\n    def __str__(self):\n        return self.name\n\n# title,audience,runtime,grade,popularity,release_date,vote,director,director_id,actorList,overview,images_t,images_h\nclass Director(models.Model):\n    name = models.CharField(max_length=50)\n    def __str__(self):\n        return self.name\n\nclass Movie(models.Model):\n    title = models.CharField(max_length=100)\n    audience = models.IntegerField()\n    runtime = models.IntegerField()\n    grade = models.CharField(max_length=50)\n    popularity = models.FloatField()\n    release_date = models.DateField()\n    vote = models.FloatField()\n    actor1 = models.TextField(blank=True)\n    actor2 = models.TextField(blank=True)\n    actor3 = models.TextField(blank=True)\n    overview = models.TextField()\n    poster_url_low = models.TextField()\n    poster_url = models.TextField()\n    director = models.ForeignKey(Director, on_delete=models.CASCADE)\n    genres = models.ManyToManyField(Genre, related_name='genre_movies', blank=True)\n    like_users = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='like_movies', blank=True)\n    s_score = models.FloatField(blank=True, null=True)\n    p_score = models.FloatField(blank=True, null=True)\n    \n    def __str__(self):\n        return self.title\n    \nclass Score(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    movie = models.ForeignKey(Movie, on_delete=models.CASCADE)\n    content = models.CharField(max_length=140)\n    score = models.IntegerField(validators=[MinValueValidator(0), MaxValueValidator(10)])\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    def __str__(self):\n        return f'{self.content}, ({self.score}Ï†ê)'\n        \nclass Post(models.Model):\n    movie = models.ForeignKey(Movie, on_delete=models.CASCADE)\n    title = models.CharField(max_length=30)\n    content = models.TextField()\n    score = models.IntegerField(validators=[MinValueValidator(0), MaxValueValidator(10)])\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    rec_users = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='rec_posts', blank=True)\n    not_rec_users = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='not_rec_posts', blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    def __str__(self):\n        return f'{self.title}, {self.content}'","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":64.5,"scrollleft":0,"selection":{"start":{"row":30,"column":8},"end":{"row":30,"column":8},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":3,"state":"start","mode":"ace/mode/python"}},"timestamp":1557898823804}